plugins {
    id 'java-gradle-plugin'
    id 'maven-publish'
    id 'java'
    id 'com.gradle.plugin-publish' version "1.2.1"
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

version = project.hasProperty('artifact_version') ? project.property('artifact_version') : '1.0'
group = artifact_group
def main = group + ".Plugin"

shadowJar {
    archiveBaseName.set(artifact_name)
    archiveClassifier.set('')
    manifest {
        attributes 'Main-Class':main
    }
    mergeServiceFiles()
    minimize()
}

tasks.build {
    dependsOn shadowJar
}

gradlePlugin {
    website.set("https://github.com/intisy/github-gradle")
    vcsUrl.set("https://github.com/intisy/github-gradle")
    plugins {
        create(artifact_name) {
            id = "$group.$artifact_name"
            implementationClass = main
            displayName = display_name
            description = "github-gradle implements an way to get dependencies from an github asset, so you don't need services like jitpack anymore"
            tags = ["github", "dependency", "jar", "jitpack"]
        }
    }
}

repositories {
	mavenCentral()
}

tasks.withType(Javadoc) {
    failOnError false
    title = "Github Gradle API Documentation"
    classpath = sourceSets.main.runtimeClasspath
    destinationDir = file("$buildDir/docs/javadoc")
    options {
        encoding = 'UTF-8'
        author = true
        version = true
        links("https://docs.oracle.com/en/java/javase/11/docs/api/") // Link to external Javadocs
    }
}

dependencies {
    implementation gradleApi()
    implementation ('org.kohsuke:github-api:1.321')
    implementation ('com.squareup.okhttp3:okhttp:4.12.0')
    testImplementation(platform("org.junit:junit-bom:5.9.1"))
    testImplementation("org.junit.jupiter:junit-jupiter")
}

task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
    from tasks.javadoc
}

artifacts {
    archives javadocJar
}

test {
    useJUnitPlatform()
}

test {
    outputs.upToDateWhen { false }
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        stackTraceFilters "entryPoint"
    }
}

task createClasspathManifest {
    def outputDir = file("$buildDir/$name")
    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir
    doLast {
        outputDir.mkdirs()
        file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
    }
}
